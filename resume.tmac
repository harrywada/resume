.\" Store the current state to ensure correct ordering.
.ds _state INIT
.\" Capitalization transformations.
.ds _caps aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ
.ds _ncaps aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz
.\" Fonts and colors
.fam Argentum
.ps 8
.defcolor fg rgb #404040
.defcolor grey rgb #f4f4f4
.defcolor white rgb #ffffff
.gcolor fg
.\" Setting spacing values.
.ie n \{\
.   nr _width 100m
.   nr _margin 2m
.   nr _list_indent 3m
.   nr _banner_total_height 10v
.\}
.el \{\
.   nr _width \*[paper-\*[paper-p]-width]
.   nr _margin 1.27c
.   nr _list_indent 0.889c
.   nr _banner_total_height 6.1c
.\}
.nr _aside_width ((647 * \n[_width]u / 2000) >? 20m)
.\" This padding is used for both sides of the aside.
.nr _aside_padding (((9 * \n[_aside_width]u) / 100)u >? 1m)
.nr _content_width (\n[_width]u - \n[_aside_width]u)
.ad l
.po \n[_margin]u
.ll (\n[_aside_width]u - \n[_margin]u - \n[_aside_padding]u)u
.\" Draw the shaded aside box.
.if !n \{\
.   nop \Z'\h'|-\n[.o]u'\v'|-1'\M[grey]\D'P \n[_aside_width]u 0 0 \n[.p]u -\n[_aside_width]u 0'\M[]'
.   sp -1 \" Reverse vertical space introduced by above requests.
.\}
.sp \n[_banner_total_height]u
.\" Macros.
.de url
.   ie n .nop \\$2
.   el .pdfhref W -D \\$2 -- \\$1
..
.de email
.   ie n .nop \\$1
.   el .pdfhref W -D mailto:\\$1 \\$1
..
.de list
.   ie r _list .br
.   el \{\
.      ie n .br
.      el   .sp +0.127c
.      in +\n[_list_indent]u
.      nr _list 1
.   \}
.   ie n .nop \h'-\w'\[bu] 'u'\[bu]
.   \" The trailing \h is to account for the space that will be added.
.   el   .nop \Z'\h'-0.381c'\fB\[bu]\f[]'\h'-\w' 'u'
..
.\" Sometimes we need a little extra space between words, and neither .tkf nor
.\" .tr works for this purpose.
.de _inc_space
.   rm _out
.   length _n "\\$1"
.   nr _i 0
.   while (\\n[_i] < \\n[_n]) \{\
.      ds _tmp \\$1
.      substring _tmp \\n[_i] \\n[_i]
.      as _out \\*[_tmp]
.      if "\\*[_tmp]" " .as _out \~\h'\\$2'
.      nr _i +1
.   \}
..
.\" XXX This gets pretty messy. Maybe try to clean up if possible.
.de _banner
.   po 0
.   ll \\n[_width]u
.   tkf ArgentumB 20 0.2m 999 0
.   tr \\*[_caps]
.   nr _ad \\n[.j]
.   ad c
.   ie n \{\
.      ds _l1 \fB\s(20\\*[NAME]\s0\f[]
.      nr _l1h 1v
.      nr _l1w \w'\\*[_l1]'
.      ds _l2 \s(11\\*[TITLE]\s0
.      nr _l2h 1v
.      nr _l2w \w'\\*[_l2]'
.      nr _banph 3v \" Banner padding height.
.      nr _banpw 10m
.   \}
.   el \{\
.      nr _sep 0.381c \" Extra space between lines for non-terminal devices.
.      _inc_space "\\*[NAME]" 0.15m
.      ds _l1 \fB\s(20\x'\\n[_sep]u'\\*[_out]\s0\f[]
.      nr _l1h 20p
.      nr _l1w \w'\\*[_l1]'
.      ds _l2 \s(11\\*[TITLE]\s0
.      nr _l2h 11p
.      nr _l2w \w'\\*[_l2]'
.      nr _banph 1.143c \" Banner padding height.
.      nr _banpw 2.032c
.      nr _banpw 2.0551c
.   \}
.   nr _banw ((\\n[_l1w]u >? \\n[_l2w]u) + (2u * \\n[_banpw]u))u
.   nr _banh (\\n[_l1h]u + \\n[_l2h]u + \\n[_sep]u + (2u * \\n[_banph]u))u
.   \" Margin between the banner and the top of the page.
.   nr _banm ((\\n[_banner_total_height]u - \\n[_banh]u - \\n[.v]u) / 2u)u
.   \" This represents the natural space between lines (both top and bottom).
.   \" When added to _sep, it represents the total distance between the first
.   \" and second lines. On terminals, don't use it.
.   if !n .nr _lsep (\\n[.v]u - \\n[.ps]u)
.   \" If the second line is longer than the first, we'll need to account for
.   \" that since the box-drawing assumes that it is starting from the
.   \" left-most text.
.   if (\\n[_l2w]>\\n[_l1w]) \{\
.      ie !n .nr _off ((\\n[_l2w]u - \\n[_l1w]u) / 2u)u
.      el    .nr _off (((\\n[_l2w]u - \\n[_l1w]u) + 1m) / 2u)u
.   \}
.   \" Because of the way lines are drawn on the terminal, we need to subtract
.   \" a line from the height as well as a space from the width of the banner.
.   if n \{\
.      nr _banh -1v
.      nr _banw -1m
.   \}
.   sp |\\n[_banm]u+\\n[_banph]u+\\n[.v]u
.   nop \Z'\h'-\\n[_off]u-\\n[_banpw]u'\v'\\n[_lsep]u+\\n[_sep]u+\\n[_l2h]u+\\n[_banph]u'\D'p \\n[_banw]u 0 0 -\\n[_banh]u -\\n[_banw]u 0''\h'-\w' 'u'
.   nop \Z'\M[white]\h'-\\n[_off]u-\\n[_banpw]u'\v'\\n[_lsep]u+\\n[_sep]u+\\n[_l2h]u+\\n[_banph]u'\D'P \\n[_banw]u 0 0 -\\n[_banh]u -\\n[_banw]u 0'\M[]'\h'-\w' 'u'
.   nop \\*[_l1]
.   br
.   nop \\*[_l2]\p
.   ad \\n[_ad]
.   tr \\*[_ncaps]
.   tkf ArgentumB 20 0 999 0
.   ll
.   po
..
.de 2c
.   nop \p
.   ds _state INIT
.   rt 0
.   _banner
.   \" Move to the main content area.
.   rt 0
.   sp \n[_banner_total_height]u
.   ad \\n[_ad]
.   tr \\*[_ncaps]
.   tkf ArgentumB 20 0 999 0
.   po (\n[_aside_width]u + \n[_aside_padding]u)u
.   ll (\n[_width]u - \n[_margin]u - \n[_aside_width]u - \n[_aside_padding]u)u
..
.de header
.   tr \*[_caps]
.   \" Don't care about conditional kerning; 999 should never trigger.
.   tkf ArgentumB 10 0.2m 999 0
.   _inc_space "\\$1" 0.2m
.   nop \D't 1250'\h'-1250u'\Z'\v' 0.254c'\D'l \\n[.l]u 0''\s(10\fB\\*[_out]\f[]\s0
.   tkf ArgentumB 10 0 999 0
.   tr \*[_ncaps]
.   ie n .sp
.   el   .sp 0.5c
..
.de section
.   if r _list \{\
.      in -\n[_list_indent]u
.      rr _list
.   \}
.   ie "\\*[_state]"\\$1" \{\
.      ie n \{\
.         ie "\\$2"br" .br
.         el           .sp
.      \}
.      el   .sp 0.254c
.   \}
.   el \{\
.      if !"\\*[_state]"INIT" \{\
.         ie n .sp
.         el   .sp 0.5c
.      \}
.      header "\\$1"
.      ds _state \\$1
.   \}
..
.de info
.   section "info"
.   tr \*[_caps]
.   nop \fB\\$1\f[]
.   tr \*[_ncaps]
.   br
..
.de link
.   section "links" br
.   url "\s(10\\$1\s0" "\\$2"
..
.de skill
.   section "skills" br
.   nop \s(10\\$1\s0
..
.de profile
.   section "profile"
..
.de exp
.   section "employment history"
.   nop \s(10\fB\\$1\f[]\s0
.   brp
.   ad r
.   sp -1
.   nop \\$2
.   brp
.   ad l
.   nop \\$3
.   if !"\\$4"" .nop \[en] \\$4
.   ie n .br
.   el   .sp 0.127c
..
.de edu
.   section "education"
.   nop \s(10\fB\\$1\f[]\s0
.   br
.   nop \\$2
..
